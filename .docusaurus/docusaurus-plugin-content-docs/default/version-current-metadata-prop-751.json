{
  "pluginId": "default",
  "version": "current",
  "label": "Next",
  "banner": null,
  "badge": false,
  "noIndex": false,
  "className": "docs-version-current",
  "isLast": true,
  "docsSidebars": {
    "tutorialSidebar": [
      {
        "type": "link",
        "label": "Cheatsheets Introduction",
        "href": "/",
        "docId": "intro"
      },
      {
        "type": "category",
        "label": "C++",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Functions",
            "href": "/cpp/functions",
            "docId": "cpp/functions"
          }
        ],
        "href": "/category/c"
      },
      {
        "type": "category",
        "label": "Go",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Arrays & Slices",
            "href": "/golang/arrays-slices",
            "docId": "golang/arrays-slices"
          },
          {
            "type": "link",
            "label": "Concurrency",
            "href": "/golang/concurrency",
            "docId": "golang/concurrency"
          },
          {
            "type": "link",
            "label": "Conditionals",
            "href": "/golang/conditionals",
            "docId": "golang/conditionals"
          },
          {
            "type": "link",
            "label": "Custom types",
            "href": "/golang/custom-types",
            "docId": "golang/custom-types"
          },
          {
            "type": "link",
            "label": "Getting started",
            "href": "/golang/getting-started",
            "docId": "golang/getting-started"
          },
          {
            "type": "link",
            "label": "fmt package (IO)",
            "href": "/golang/io",
            "docId": "golang/io"
          },
          {
            "type": "link",
            "label": "Functions",
            "href": "/golang/loops",
            "docId": "golang/loops"
          },
          {
            "type": "link",
            "label": "Variables",
            "href": "/golang/variables",
            "docId": "golang/variables"
          }
        ],
        "href": "/category/go"
      },
      {
        "type": "category",
        "label": "PureScript",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Functions",
            "href": "/purescript/functions",
            "docId": "purescript/functions"
          }
        ],
        "href": "/category/purescript"
      },
      {
        "type": "category",
        "label": "Haskell",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Data types",
            "href": "/haskell/datatypes",
            "docId": "haskell/datatypes"
          },
          {
            "type": "link",
            "label": "Functions",
            "href": "/haskell/functions",
            "docId": "haskell/functions"
          },
          {
            "type": "link",
            "label": "ghci",
            "href": "/haskell/ghci",
            "docId": "haskell/ghci"
          }
        ],
        "href": "/category/haskell"
      }
    ]
  },
  "docs": {
    "cpp/functions": {
      "id": "cpp/functions",
      "title": "Functions",
      "description": "Terminology:",
      "sidebar": "tutorialSidebar"
    },
    "golang/arrays-slices": {
      "id": "golang/arrays-slices",
      "title": "Arrays & Slices",
      "description": "Arrays",
      "sidebar": "tutorialSidebar"
    },
    "golang/concurrency": {
      "id": "golang/concurrency",
      "title": "Concurrency",
      "description": "In this example, there will never be \"fish\" printed.",
      "sidebar": "tutorialSidebar"
    },
    "golang/conditionals": {
      "id": "golang/conditionals",
      "title": "Conditionals",
      "description": "You can declare variables even within the if-syntax:",
      "sidebar": "tutorialSidebar"
    },
    "golang/custom-types": {
      "id": "golang/custom-types",
      "title": "Custom types",
      "description": "Thanks to custom types, we can create functions, so called receiver-functions, that do only work with the certain type, we created. A custom type is therefore just a fancy replacement for a base type, not something completely new.",
      "sidebar": "tutorialSidebar"
    },
    "golang/getting-started": {
      "id": "golang/getting-started",
      "title": "Getting started",
      "description": "app.go",
      "sidebar": "tutorialSidebar"
    },
    "golang/io": {
      "id": "golang/io",
      "title": "fmt package (IO)",
      "description": "fmt is a default package, used for IO. It stands for \"format\".",
      "sidebar": "tutorialSidebar"
    },
    "golang/loops": {
      "id": "golang/loops",
      "title": "Functions",
      "description": "Since Go is a compiled language, we can write the function that should be executed, after the calling function. No problem.",
      "sidebar": "tutorialSidebar"
    },
    "golang/variables": {
      "id": "golang/variables",
      "title": "Variables",
      "description": "Go is statically typed. That means, once we chose a datatype, we must keep the value aligned to it.",
      "sidebar": "tutorialSidebar"
    },
    "haskell/datatypes": {
      "id": "haskell/datatypes",
      "title": "Data types",
      "description": "Int & Integer",
      "sidebar": "tutorialSidebar"
    },
    "haskell/functions": {
      "id": "haskell/functions",
      "title": "Functions",
      "description": "Second title",
      "sidebar": "tutorialSidebar"
    },
    "haskell/ghci": {
      "id": "haskell/ghci",
      "title": "ghci",
      "description": "GHCI",
      "sidebar": "tutorialSidebar"
    },
    "intro": {
      "id": "intro",
      "title": "Cheatsheets Introduction",
      "description": "Hey there! Welcome to my cheatsheets",
      "sidebar": "tutorialSidebar"
    },
    "purescript/functions": {
      "id": "purescript/functions",
      "title": "Functions",
      "description": "As the name of functional programming suggests it, this style of writing code resolves all around writing functions - so, let's cover what you need to know.",
      "sidebar": "tutorialSidebar"
    }
  }
}